from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import pandas as pd
import datetime

# –¢–æ–∫–µ–Ω –∏–∑ BotFather
TOKEN = '7293266241:AAHf82BsRaqUBwZuWQwIbTEqHAesAABIJyk'

# –ü–æ—Ä–æ–≥ —Å–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
SCORING_THRESHOLD = 700

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
def save_application(name, phone, amount, income, purpose):
    try:
        df = pd.read_csv("data.csv")
    except FileNotFoundError:
        df = pd.DataFrame(columns=[
            "–î–∞—Ç–∞", "–ó–∞—è–≤–∫–∞ID", "–¢–∏–ø–ö—Ä–µ–¥–∏—Ç–∞", "–°—É–º–º–∞", "–î–æ—Ö–æ–¥", "–°–∫–æ—Ä–∏–Ω–≥",
            "–í—Ä–µ–º—è–û–±—Ä–∞–±–æ—Ç–∫–∏", "–û–¥–æ–±—Ä–µ–Ω–æ", "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–¶–µ–ª—å"
        ])

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è
    scoring = int(float(income) * 0.1 + float(amount) / 10000)
    approved = 1 if scoring >= SCORING_THRESHOLD else 0

    # –ù–æ–≤—ã–π ID –∑–∞—è–≤–∫–∏
    next_id = 1 if df.empty else df['–ó–∞—è–≤–∫–∞ID'].max() + 1

    new_entry = {
        "–î–∞—Ç–∞": datetime.datetime.now().strftime("%Y-%m-%d"),
        "–ó–∞—è–≤–∫–∞ID": next_id,
        "–¢–∏–ø–ö—Ä–µ–¥–∏—Ç–∞": "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç",
        "–°—É–º–º–∞": amount,
        "–î–æ—Ö–æ–¥": income,
        "–°–∫–æ—Ä–∏–Ω–≥": scoring,
        "–í—Ä–µ–º—è–û–±—Ä–∞–±–æ—Ç–∫–∏": 1,
        "–û–¥–æ–±—Ä–µ–Ω–æ": approved,
        "–ò–º—è": name,
        "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
        "–¶–µ–ª—å": purpose
    }

    df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
    df.to_csv("data.csv", index=False)

    print("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:", new_entry)

    return approved  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç", callback_data='apply')],
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥", url="https://yourusername.pythonanywhere.com")]   # üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç.', reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'apply':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        context.user_data['step'] = 'name'


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get('step')

    if step == 'name':
        context.user_data['name'] = update.message.text
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        context.user_data['step'] = 'phone'

    elif step == 'phone':
        context.user_data['phone'] = update.message.text
        await update.message.reply_text("–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?")
        context.user_data['step'] = 'amount'

    elif step == 'amount':
        context.user_data['amount'] = update.message.text
        await update.message.reply_text("–ö–∞–∫–æ–≤ –≤–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥?")
        context.user_data['step'] = 'income'

    elif step == 'income':
        context.user_data['income'] = update.message.text
        await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é —Ü–µ–ª—å –≤—ã –±–µ—Ä–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç? –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ.")
        context.user_data['step'] = 'purpose'

    elif step == 'purpose':
        context.user_data['purpose'] = update.message.text

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        name = context.user_data.get('name')
        phone = context.user_data.get('phone')
        amount = context.user_data.get('amount')
        income = context.user_data.get('income')
        purpose = context.user_data.get('purpose')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        approved = save_application(name, phone, amount, income, purpose)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if approved:
            msg = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
        else:
            msg = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ —Å–∫–æ—Ä–∏–Ω–≥."

        await update.message.reply_text(msg)

        # –ö–Ω–æ–ø–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
        keyboard = [[InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥", url="http://127.0.0.1:8050/")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–¥–µ—Å—å:", reply_markup=reply_markup)

        # –°–±—Ä–æ—Å —à–∞–≥–æ–≤
        context.user_data.clear()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()